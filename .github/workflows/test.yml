name: Test
on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }} 
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        python-version: [3.7]
    env:
      ETH_PRIVATE_KEY: ${{ secrets.ETH_PRIVATE_KEY }}
      ENDPOINT: ${{ secrets.ENDPOINT }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      MANAGER_BRANCH: "delegation-manual"
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e .[dev]
        pip install codecov pytest-cov
    - name: Lint with flake8
      run: |
        flake8 .
    - name: Build binary
      run: |
        bash scripts/build.sh 1.0.0 test-branch
    # - name: Install Docker on macOS
    #   if: matrix.os == 'macOS-latest'
    #   run: |
    #     brew install docker-machine docker
    - name: "[Pre] Install Docker"
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        brew install docker docker-machine-driver-xhyve
        sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
        sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
        while ! docker-machine create --driver xhyve default; do
          docker-machine rm -f default
          sleep 1;
        done
        # Export variable (this target)
        eval "$(docker-machine env default)"
        DOCKER_TLS_VERIFY="$(   docker-machine env default | grep DOCKER_TLS_VERIFY   | sed -e 's/.*="//g' -e 's/"$//g' )"
        DOCKER_HOST="$(         docker-machine env default | grep DOCKER_HOST         | sed -e 's/.*="//g' -e 's/"$//g' )"
        DOCKER_CERT_PATH="$(    docker-machine env default | grep DOCKER_CERT_PATH    | sed -e 's/.*="//g' -e 's/"$//g' )"
        DOCKER_MACHINE_NAME="$( docker-machine env default | grep DOCKER_MACHINE_NAME | sed -e 's/.*="//g' -e 's/"$//g' )"
        # Export variable (this other targets)
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-environment-variable-set-env
        echo ::set-env name=DOCKER_TLS_VERIFY::${DOCKER_TLS_VERIFY}
        echo ::set-env name=DOCKER_HOST::${DOCKER_HOST}
        echo ::set-env name=DOCKER_CERT_PATH::${DOCKER_CERT_PATH}
        echo ::set-env name=DOCKER_MACHINE_NAME::${DOCKER_MACHINE_NAME}
        # Show info
        docker-machine ls
        docker-machine env default
        docker version
    - name: "[Pre] Install Docker Compose"
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        sudo curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version

    - name: "[Pre] Setup Docker machine"
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        # Setup DNS records
        echo "127.0.0.1  localhost" | sudo tee -a /etc/hosts

        # Portforwarding from DOCKER_HOST to local
        HOST="$( echo "${DOCKER_HOST}" | sed -e 's|^tcp://||g' -e 's|:.*||g' )"
        echo "${HOST}"
        sudo socat -s -d -d tcp-listen:80,reuseaddr,fork tcp:${HOST}:80 &
        sleep 2
        sudo socat -s -d -d tcp-listen:443,reuseaddr,fork tcp:${HOST}:443 &
        sleep 2
        if ! netstat -an | grep -i LISTEN | grep -E '(:80)|(\.80)\s'; then
          netstat -an | grep -i LISTEN;
          false;
        fi
        if ! netstat -an | grep -i LISTEN | grep -E '(:443)|(\.443)\s'; then
          netstat -an | grep -i LISTEN;
          false;
        fi
        host localhost
        curl -sS -I 'http://localhost:80' || true
        curl -sS -I 'https://localhost:443' || true

    - name: Prepare tests
      run: |
        bash ./scripts/prerare_tests.sh
    - name: Run tests
      run: |
        bash ./scripts/run_tests.sh
    - name: Codecov
      run: |
        codecov -t $CODECOV_TOKEN
